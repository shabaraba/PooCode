// Final simple FizzBuzz implementation

def fizzbuzz(n): int -> str {
    // Check divisibility
    n % 3 == 0 >> div_by_3
    n % 5 == 0 >> div_by_5
    
    // Initial empty result
    "" >> result
    
    // Prepare the result strings
    "FizzBuzz" >> fizzbuzz_str
    "Fizz" >> fizz_str
    "Buzz" >> buzz_str
    n |> to_string >> num_str
    
    // Check conditions and set the result
    div_by_3 && div_by_5 >> result_is_fizzbuzz
    div_by_3 && (div_by_5 == false) >> result_is_fizz
    (div_by_3 == false) && div_by_5 >> result_is_buzz
    (div_by_3 == false) && (div_by_5 == false) >> result_is_num
    
    // Update result based on conditions
    result_is_fizzbuzz == true >> ret_result1
    result_is_fizzbuzz != true >> ret_result1
    result_is_fizzbuzz == true >> fizzbuzz_str >> ret_result1
    ret_result1 >> result
    
    result_is_fizz == true >> ret_result2
    result_is_fizz != true >> ret_result2
    result_is_fizz == true >> fizz_str >> ret_result2
    ret_result2 >> result
    
    result_is_buzz == true >> ret_result3
    result_is_buzz != true >> ret_result3
    result_is_buzz == true >> buzz_str >> ret_result3
    ret_result3 >> result
    
    result_is_num == true >> ret_result4
    result_is_num != true >> ret_result4
    result_is_num == true >> num_str >> ret_result4
    ret_result4 >> result
    
    // Return the result
    result >> ðŸ’©
}

// Test with specific cases
"For 1: " |> print
1 |> fizzbuzz |> print

"For 3: " |> print
3 |> fizzbuzz |> print

"For 5: " |> print
5 |> fizzbuzz |> print

"For 15: " |> print
15 |> fizzbuzz |> print

