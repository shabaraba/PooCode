// test_new_pipes.poo - 新しいパイプ演算子のテスト

// 配列を作成
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] >> numbers
"配列を作成しました: " + numbers |> print

// 条件関数を定義
def is_even() : int -> bool {
    🍕 % 2 == 0 >> 💩
}

// 新しいmap演算子(+>)をパイプとして使用
numbers +> is_even >> results
"map演算子(+>)のテスト: " + results |> print

// 偶数のみをフィルタリング - 新しいfilter演算子(?>)
numbers ?> is_even >> evens
"filter演算子(?>)のテスト: " + evens |> print

// 引数付き関数を定義
def multiply(factor) : int -> int {
    🍕 * factor >> 💩
}

// 引数付きでmap演算子を使用
numbers +> multiply(10) >> multiplied
"引数付きmap演算子のテスト: " + multiplied |> print

// 引数付きfilter関数を定義
def greater_than(n) : int -> bool {
    🍕 > n >> 💩
}

// 引数付きでfilter演算子を使用
numbers ?> greater_than(5) >> greater_than_five
"引数付きfilter演算子のテスト: " + greater_than_five |> print

// パイプラインの連鎖とmap/filterの組み合わせ - 新しい演算子を使用
numbers ?> is_even +> multiply(100) >> complex_result
"複雑なパイプライン(新演算子): " + complex_result |> print

// 従来のmap/filter関数との比較
numbers filter is_even map multiply(100) >> old_style_result
"従来のパイプライン(関数): " + old_style_result |> print

// 従来のパイプラインとの組み合わせ
numbers |> filter is_even |> map multiply(100) >> pipe_result
"従来のパイプライン(|>): " + pipe_result |> print

// 演算子の混合使用
numbers ?> is_even |> map multiply(100) >> mixed_result1
"混合パイプライン1: " + mixed_result1 |> print

numbers filter is_even +> multiply(100) >> mixed_result2
"混合パイプライン2: " + mixed_result2 |> print
