sequenceDiagram
    %% シーケンス図のパーティシパント定義
    participant User as ユーザー
    participant Runtime as 実行ランタイム
    participant Lexer as 字句解析器
    participant Parser as 構文解析器
    participant AST as 抽象構文木
    participant Evaluator as 評価器
    participant Environment as 環境

    %% プログラム実行開始
    User->>Runtime: プログラム実行（mapパイプライン含む）
    Runtime->>Lexer: ソースコード解析依頼
    
    %% 字句解析プロセス
    Lexer->>Lexer: ソースコードをトークンに分割
    Note over Lexer: 特殊トークン `|>`, `map/` の検出
    Lexer-->>Parser: トークン列を渡す
    
    %% 構文解析プロセス
    Parser->>Parser: プログラムノード作成
    
    %% パイプライン構文の解析
    Parser->>Parser: parsePipeStatement()
    Parser->>Parser: 左辺式（入力）の解析
    
    %% mapパイプラインの解析
    Parser->>Parser: 'map/' トークン検出
    Parser->>Parser: parseMapFilter() 
    Parser->>Parser: 変換関数の解析
    
    %% AST構築完了
    Parser-->>AST: 完成したAST
    AST-->>Runtime: 構文解析完了
    
    %% 評価プロセス開始
    Runtime->>Evaluator: 評価開始
    
    %% パイプライン入力の評価
    Evaluator->>Evaluator: evalPipeStatement()
    Evaluator->>Evaluator: 左辺式を評価（コレクション）
    
    %% mapパイプラインの評価
    Evaluator->>Evaluator: evalMapFilterStatement()
    Note over Evaluator: コレクションが配列または文字列か確認
    
    %% mapの処理（イテレーション開始）
    Evaluator->>Evaluator: 各要素に対して繰り返し処理開始
    
    loop コレクションの各要素に対して
        %% 新しい環境を作成
        Evaluator->>Environment: 新しいイテレーションスコープ作成
        Environment-->>Evaluator: イテレーション環境
        
        %% 現在の要素を🍕に設定
        Evaluator->>Environment: 現在の要素を🍕に設定
        
        %% 変換関数を評価
        Evaluator->>Evaluator: 変換関数を現在の要素に適用
        Evaluator->>Evaluator: 結果を取得（💩の値）
        
        %% 結果を新しい配列に追加
        Evaluator->>Evaluator: 結果を出力配列に追加
    end
    
    %% 変換結果を返却
    Evaluator-->>Runtime: 変換済みコレクション
    
    %% 次のパイプラインステージがあれば継続
    alt 次のパイプラインステージあり
        Note over Runtime, Evaluator: 次のパイプラインステージに変換結果を渡す
        Runtime->>Evaluator: 次のステージを評価（結果を入力として）
        Evaluator-->>Runtime: 最終結果
    else パイプライン終了
        Runtime-->>User: 処理結果表示
    end