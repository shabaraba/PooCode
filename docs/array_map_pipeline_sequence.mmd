sequenceDiagram
    %% シーケンス図のパーティシパント定義
    participant Runtime as 実行ランタイム
    participant Evaluator as 評価器
    participant Env as 環境
    participant Stage1 as ステージ1<br>(配列を返す)
    participant MapPipe as mapパイプ処理
    participant Stage2 as ステージ2<br>(各要素に適用)

    %% パイプライン評価開始
    Note over Runtime: パイプライン評価開始<br>(例: data |> stage1 |> map/stage2)
    Runtime->>Evaluator: パイプライン評価リクエスト
    
    %% 初期データの評価
    Evaluator->>Evaluator: evalPipeStatement()
    Evaluator->>Evaluator: 初期データを評価
    Evaluator-->>Evaluator: 初期データの値
    
    %% ステージ1の処理 (配列を返す)
    Evaluator->>Stage1: ステージ1に初期データを渡す
    
    %% ステージ1の評価環境準備
    Evaluator->>Env: 新しいステージ1環境作成
    Env-->>Evaluator: ステージ1の環境
    
    %% ステージ1の入力設定
    Evaluator->>Env: 🍕に初期データを設定
    Note over Env: 環境内: 🍕 = 初期データ
    
    %% ステージ1の評価 (配列を返す)
    Evaluator->>Stage1: 関数処理実行
    Stage1->>Env: 💩に配列結果を格納
    Env-->>Stage1: 格納完了
    Stage1-->>Evaluator: 配列結果
    
    %% mapパイプの検出と処理開始
    Note over Evaluator: mapパイプ演算子 (map/) を検出
    Evaluator->>MapPipe: 配列と関数を渡して処理開始
    
    %% mapパイプ処理の準備
    MapPipe->>MapPipe: evalMapFilterStatement()
    MapPipe->>MapPipe: 入力が配列か確認
    
    %% 配列の各要素に対する繰り返し処理
    loop 配列の各要素に対して
        %% 要素ごとの環境作成
        MapPipe->>Env: 要素ごとの新環境作成
        Env-->>MapPipe: 要素用環境
        
        %% 現在の要素を🍕に設定
        MapPipe->>Env: 🍕に現在の配列要素を設定
        Note over Env: 環境内: 🍕 = 配列[i]
        
        %% ステージ2の処理を各要素に適用
        MapPipe->>Stage2: 要素に対してステージ2を実行
        Stage2->>Env: 💩に変換結果を格納
        Env-->>Stage2: 格納完了
        Stage2-->>MapPipe: 要素の変換結果
        
        %% 変換結果を出力配列に追加
        MapPipe->>MapPipe: 出力配列に結果を追加
    end
    
    %% mapパイプの処理完了、結果配列の返却
    MapPipe-->>Evaluator: 変換済み配列
    
    %% 次のパイプラインステージがあれば継続
    alt 次のパイプラインステージあり
        Note over Evaluator: 次のステージに変換済み配列を渡す
        Evaluator->>Evaluator: 次のステージ評価
    else パイプライン終了
        Evaluator-->>Runtime: 最終結果配列
    end
    
    %% パイプライン戻り値のユースケース説明
    Note over Runtime: 変換後の配列が最終結果<br>- 各要素がステージ2で変換された<br>- 結果は元配列と同じ長さになる