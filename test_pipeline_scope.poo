// パイプラインでの🍕スコープテスト

// 基本的な関数定義
def add_ten(): int -> int {
    "Inside add_ten, 🍕:" |> print;
    🍕 |> print;
    🍕 + 10 >> 💩
}

def double(): int -> int {
    "Inside double, 🍕:" |> print;
    🍕 |> print;
    🍕 * 2 >> 💩
}

def process(value): int -> int {
    "Inside process, 🍕:" |> print;
    🍕 |> print;
    
    // 内部で別の関数呼び出し
    "Calling add_ten from inside process:" |> print;
    🍕 |> add_ten |> print;
    
    // 戻り値
    🍕 + 5 >> 💩
}

// パイプラインのテスト
"Simple pipeline test:" |> print;
5 |> add_ten |> double |> print;

// ネストしたパイプライン呼び出しテスト
"Nested pipeline test:" |> print;
20 |> process |> double |> print;
